Spring 是为解决企业应用程序开发复杂性而创建的一个Java开源框架
是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架
通过控制反转（IOC）的技术达到松耦合的目的
提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发。
包含并管理应用对象的配置和声明周期，这个意义上是一种容器。
将简单的组件配置、组合成为复杂的应用，这个角度是一种框架


简单、方便、快捷


获取对象的不同方式  传统方式   用IOC

IoC (Invertion of Control0) 控制反转
控制对象的创建和销毁（生命周期）
将对象的控制权交给容器
哪些方面的控制被反转了呢？获得依赖对象的过程被反转了。不是由我们控制，而是由外部容器控
依赖注入（Dependency Injection）IOC容器运行期间，动态地将某种依赖关系注入到对象中。
依赖注入时控制反转的实现。

注入：在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。
（扫描xml文件中的bean标签时，实例化对象的同时，完成成员变量的赋值）
Spring常用的注入方式：

设值注入：通过一个属性或者成员变量的Set方法进行注入

<bean id="injectionService" class="com.imooc.ioc.injection.service.InjectionServiceImpl">

<property name="injectionDAO" ref="injectionDAO"/>

</bean>

<bean id="injectionDAO" class="com.imooc.ioc.injection.dao.InjectionDAOImpl">

</bean>

构造注入

<bean id="injectionService" class="com.imooc.ioc.injection.service.InjectionServiceImpl">

<constructor-arg name="injectionDAO" ref="injectionDAO"/>

</bean>

<bean id="injectionDAO" class="com.imooc.ioc.injection.dao.InjectionDAOImpl">

</bean>



Bean的作用域：
singleton:单例模式，一个Bean容器中只存在一份。
prototype:每次请求（每次使用）创建新的实例，destroy方式不生效。

Bean容器初始化
基础:两个包：org.springframework.beans  
              org.springframework.context
              BeanFactory提供配置结构和基本功能，加载并初始化Bean
              ApplicationContext保存了Bean对象并在SPring中被广泛使用
方式，ApplicationContext
-本地文件
-Classpath
-Web应用中依赖servlet或Listener

Spring注入是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。
Spring的常用注入方式：
设值注入：通过一个属性或者成员变量的Set方法进行注入
<property name="injectionDAO" ref="injectionDAO"/>
构造注入
<constructor-arg name="injectionDAO" ref="injectionDAO"/>

一，编辑Java文件时，

注释和取消注释的快捷键都是： "CTRL + / "



二，编辑xml文件时，

注释：CTRL + SHIFT + /

取消注释：CTRL + SHIFT + \

Bean的作用域
singleton:单例，指一个Bean容器只存在一份
prototype:每次请求（每次使用）创建新的实例，destroy方式不生效
request:每次http请求创建一个实例且仅在当前request内有效
session:同上，每次http请求创建，当前session内有效
global session:基于Protlet的web中有效（prtlet定义了global session），如果是在web中，同session


Bean的生命周期
初始化：
实现org.springframework.beans.factory.InitializingBean接口，覆盖afterPropertiesSet方法
-配置 init-method

同时使用三种方式的顺序
接口的实现
Init-method（default不生效，被覆盖掉）
